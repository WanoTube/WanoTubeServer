const mongoose = require('mongoose');
const Schema = mongoose.Schema;

const { schemaOptions } = require('../constants/schemaOptions');
const { VideoType, ProcessStatus } = require('../constants/video');

const VideoSchema = new Schema({
	title: { type: String, required: true },
	video_key: { type: String, required: true },
	manifest_key: { type: String },
	thumbnail_key: { type: String },
	autogenerated_thumbnails_key: { type: [String], default: [], select: false },
	size: { type: Number, required: true },
	description: { type: String, default: "" },
	recognition_result: { type: Schema.Types.Mixed },
	author_id: { type: Schema.Types.ObjectId, ref: 'User', required: true },
	comments: {
		type: [Schema.Types.ObjectId],
		ref: 'Comment',
		default: [],
		select: false,
	},
	likes: {
		type: [Schema.Types.ObjectId],
		ref: 'Like',
		default: [],
		select: false,
	},
	views: {
		type: [Schema.Types.ObjectId],
		ref: 'User',
		default: [],
		select: false,
	},
	total_likes: { type: Number, default: 0 },
	total_comments: { type: Number, default: 0 },
	total_views: { type: Number, default: 0 },
	visibility: { type: Number, default: 1 }, // 0: public, 1: private, 2: unpublic, 3: blocked
	duration: { type: Number },
	type: { type: String, enum: Object.values(VideoType), default: VideoType.NORMAL },
	tags: { type: [String], default: [] },
	status: { type: String, enum: Object.values(ProcessStatus), default: ProcessStatus.PROCESSING },

}, schemaOptions);

VideoSchema.index({ title: 'text', tags: 'text', description: 'text' });

VideoSchema.post("findOneAndUpdate", function (data) {
	if (data.views) data.total_views = data.views.length;
	if (data.visibility === 0 && !!data.recognition_result) data.visibility = 3;
	data.save();
})

module.exports = mongoose.model('Video', VideoSchema);