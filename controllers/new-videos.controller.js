const fs = require('fs');

const { trackUploadS3Progress } = require('../configs/socket');
const { getFileStream, uploadToS3 } = require('../utils/aws-s3-handlers');
const { removeRedundantFiles } = require('../utils/file-handler');
const {
	converVideoToAudio,
	isVideoHaveAudioTrack,
	generateThumbnail,
	generateFileFromBuffer
} = require('../utils/videos-handlers');
const { handleCopyright } = require('../utils/copyright-handler');
const { recogniteAudio } = require('./audio-recoginition.controller');
const { createVideoInfos } = require('./video-info.controller');
const Video = require('../models/video');

exports.getVideoById = async function (req, res) {
	const key = req.params.key;
	try {
		const readStream = await getFileStream(key)
		if (readStream) {
			readStream.pipe(res);
		}
	} catch (error) {
		res.json(error);
	}
};

exports.uploadAndProcessVideo = async function (req, res) {

	const { _id, channelId } = req.user;

	if (!req.files || !req.files.video) {
		console.log('No file');
		res.status(400).json("No file");
		return;
	}
	if (!req.body) {
		console.log('No body')
		return res.status(400).json("No body")
	}
	const videoBuffer = req.files.video;
	console.log(videoBuffer)
	try {
		const { title, fileKey: videoKey } = await generateFileFromBuffer(videoBuffer, _id);

		console.log("recogniteAudioFromVideo")
		const recognizedMusic = await recogniteAudioFromVideo(videoKey, channelId);

		console.log("generateThumbnail")
		const { autogeneratedThumbnailsKey, thumbnailKey } = await generateThumbnail(videoKey, channelId);

		console.log("uploadToS3")
		for (let i = 0; i < autogeneratedThumbnailsKey.length; i++) {
			await uploadToS3(autogeneratedThumbnailsKey[i], val => val / 4 + 50 / 3 * (i + 1), channelId);
		}
		await uploadToS3(videoKey, val => val / 4 + 75, channelId);

		const saveDBResult = await saveVideoToDatabase(videoKey, {
			...req.body, title, author_id: _id,
			recognition_result: recognizedMusic?.recognizeResult,
			autogenerated_thumbnails_key: autogeneratedThumbnailsKey,
			thumbnail_key: thumbnailKey
		})

		removeRedundantFiles(videoKey);
		removeRedundantFiles(recognizedMusic.audioKey);
		for (let key of autogeneratedThumbnailsKey) {
			removeRedundantFiles(key);
		}
		if (saveDBResult) {
			// handleCopyright(title, channelId);
			res.status(200).json(saveDBResult)
		}
		else {
			console.log('Cannot save DB');
			res.status(500).json("Cannot save DB");
		}
	} catch (error) {
		console.log(error)
		if (error.msg) return res.status(400).json(error.msg);
		else return res.status(400).json(error);
	}
}

async function saveVideoToDatabase(url, body) {
	return new Promise(async function (resolve, reject) {
		try {
			const fileSize = fs.statSync(url).size;
			const { title, description, duration, author_id, recognition_result, autogenerated_thumbnails_key, thumbnail_key, type } = body;
			const reqVideo = {
				title,
				description,
				duration,
				thumbnail_key,
				autogenerated_thumbnails_key,
				type,
				url,
				size: fileSize,
				visibility: 1,	//first set private
				recognition_result: recognition_result.status.code === 0 ? recognition_result : null,
			}

			if (url) {
				// Save to AWS
				const newVideo = new Video(reqVideo);

				// TO-DO: UserID is hardcoded
				if (author_id) {
					newVideo.author_id = author_id

					const videoAfterCreatedInDB = await createVideoInfos(newVideo);
					if (videoAfterCreatedInDB) {
						resolve(videoAfterCreatedInDB)
					}
					else reject("Cannot save video to DB")
				}
				else
					reject("No user id passed")
			} else {
				reject("newFilePath not found")
			}
		} catch (error) {
			reject(error)
		}
	})

}

async function recogniteAudioFromVideo(videoPath, channelId) {
	return new Promise(async function (resolve, reject) {
		try {
			const name = videoPath.split("/")[2].split(".")[0];
			const audioSavedPath = 'uploads/audios/' + name + '.mp3';
			if (videoPath) {
				const isAudioIncluded = await isVideoHaveAudioTrack(videoPath);
				trackUploadS3Progress(10, channelId);
				if (isAudioIncluded) {
					const convertResult = await converVideoToAudio(videoPath, audioSavedPath);
					trackUploadS3Progress(18, channelId);
					if (convertResult) {
					} else {
						throw new Error("Cannot convert music");
					}
					const bitmap = fs.readFileSync(audioSavedPath);

					//TO-DO: Split to multiple audios for recognize quicker and easier to track the song name from timestamp?

					const recognizeResultACR = await recogniteAudio(Buffer.from(bitmap));
					trackUploadS3Progress(20, channelId);
					if (!recognizeResultACR) resolve(null);
					const recognizeResult = {
						savedName: videoPath,
						audioKey: audioSavedPath,
						recognizeResult: recognizeResultACR
					};
					if (recognizeResult && recognizeResultACR) {
						resolve(recognizeResult)
					} else {
						resolve(null)
					}
				} else {
					resolve(null)
				}
			} else {
				throw new Error("File required");
			}
		} catch (error) {
			reject(error)
		}
	})

}